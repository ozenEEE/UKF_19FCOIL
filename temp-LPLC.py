# -*- coding: utf-8 -*-
# This script was auto-generated by Sim4Life version 6.2.1.4910

import numpy
import s4l_v1.analysis as analysis
import s4l_v1.document as document
import s4l_v1.model as model
import s4l_v1.units as units
import s4l_v1.units as units
import builtins
from s4l_v1 import ReleaseVersion
from s4l_v1 import Unit

p1=[399,358,404,380,357,396,374,405]
p2=[405,341,409,373,398,367,370,411]
p3=[347,345,379,338,370,356,371,370]
p4=[406,399,348,363,406,368,360,346]
p5=[385,390,349,350,351,345,376,357]
p6=[345,361,357,397,357,347,376,368]
p7=[358,409,401,361,348,408,399,382]
p8=[379,340,357,377,348,409,397,357]
p9=[409,370,399,350,403,381,386,383]
p10=[410,366,356,383,381,342,366,391]
p11=[349,395,407,357,379,355,398,354]
p12=[410,397,364,387,348,364,377,346]
p13=[409,352,352,389,401,399,364,360]
p14=[374,374,356,394,384,339,408,361]
p15=[398,371,384,371,364,341,403,369]
p16=[348,386,373,344,376,350,379,376]
p17=[369,391,364,355,368,386,384,344]
p18=[406,394,400,406,343,392,382,357]
p19=[397,358,381,349,355,386,353,398]
p20=[409,388,379,399,347,371,360,340]
p21=[387,387,406,378,351,379,373,407]
p22=[340,350,359,412,355,360,355,392]
p23=[401,346,394,343,369,393,401,374]
p24=[408,375,394,371,341,352,352,381]
p25=[388,409,366,345,405,389,354,355]
p26=[394,363,380,410,408,351,350,372]
p27=[393,381,343,338,374,365,355,410]
p28=[367,354,342,396,374,384,370,379]
p29=[387,394,377,399,363,396,361,377]
p30=[350,357,396,403,405,344,407,355]
p31=[390,375,408,344,365,407,370,374]
p32=[340,390,347,367,346,396,351,384]
a1=[2,48,87,136,183,225,271,316]
a2=[-1,46,89,135,184,223,269,317]
a3=[-1,42,93,137,182,221,274,316]
a4=[4,43,93,136,179,226,266,319]
a5=[-4,48,86,132,181,228,270,312]
a6=[3,41,89,132,176,224,269,317]
a7=[4,45,90,139,184,221,270,313]
a8=[3,42,89,132,183,223,272,312]
a9=[-4,49,91,131,183,222,268,316]
a10=[-2,47,91,136,178,223,273,315]
a11=[-1,45,88,138,181,224,270,315]
a12=[2,45,89,137,176,225,266,316]
a13=[-3,41,86,132,179,225,267,317]
a14=[2,47,94,134,178,228,272,314]
a15=[-4,41,87,135,177,225,270,316]
a16=[1,41,86,139,177,229,267,314]
a17=[-0,45,89,132,179,226,269,318]
a18=[3,41,87,138,176,229,271,318]
a19=[2,48,90,136,181,223,267,313]
a20=[4,48,89,134,180,227,272,316]
a21=[4,47,94,132,182,223,268,316]
a22=[-1,42,94,134,182,227,274,315]
a23=[2,46,86,135,181,227,268,318]
a24=[-3,45,92,132,176,221,272,313]
a25=[-4,49,88,136,176,223,267,313]
a26=[2,46,89,133,178,223,268,312]
a27=[0,48,90,134,180,227,266,319]
a28=[-0,45,94,136,181,228,271,316]
a29=[4,44,89,133,179,224,272,315]
a30=[1,48,94,133,183,228,270,316]
a31=[1,41,88,136,182,227,269,315]
a32=[3,42,92,133,184,221,271,316]


try:
	# Define the version to use for default values
	ReleaseVersion.set_active(ReleaseVersion.version6_2)
	
	# Creating the analysis pipeline
	# Adding a new EmMultiPortSimulationExtractor
	simulation = document.AllSimulations["EM - BB - LPLC - 8x"]
	em_multi_port_simulation_extractor = simulation.Results()
	
	# Adding a new ModelToGridFilter
	inputs = []
	model_to_grid_filter1 = analysis.core.ModelToGridFilter(inputs=inputs)
	model_to_grid_filter1.Name = "Line1LPLC"
	model_to_grid_filter1.Entity = model.AllEntities()["Line1LPLC"]
	model_to_grid_filter1.MaximumEdgeLength = 0.001, units.Meters
	model_to_grid_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(model_to_grid_filter1)
	
	# Adding a new ModelToGridFilter
	inputs = []
	model_to_grid_filter2 = analysis.core.ModelToGridFilter(inputs=inputs)
	model_to_grid_filter2.Name = "Line2LPLC"
	model_to_grid_filter2.Entity = model.AllEntities()["Line2LPLC"]
	model_to_grid_filter2.MaximumEdgeLength = 0.001, units.Meters
	model_to_grid_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(model_to_grid_filter2)
	
	# Adding a new ModelToGridFilter
	inputs = []
	model_to_grid_filter3 = analysis.core.ModelToGridFilter(inputs=inputs)
	model_to_grid_filter3.Name = "Line3LPLC"
	model_to_grid_filter3.Entity = model.AllEntities()["Line3LPLC"]
	model_to_grid_filter3.MaximumEdgeLength = 0.001, units.Meters
	model_to_grid_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(model_to_grid_filter3)

	# Adding a new EmMultiPortSimulationCombiner
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	# em_multi_port_simulation_combiner = analysis.extractors.EmMultiPortSimulationCombiner(inputs=inputs)
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	p=[375,375,375,375,375,375,375,375]
	a=[0,45,90,135,180,225,270,315]
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p[n], a[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R0\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R0\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R0\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
#R1	
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p1[n], a1[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R1\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R1\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R1\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R2
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p2[n], a2[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R2\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R2\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R2\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R3
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p3[n], a3[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R3\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R3\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R3\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R4
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p4[n], a4[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R4\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R4\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R4\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R5
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p5[n], a5[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R5\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R5\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R5\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R6
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p6[n], a6[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R6\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R6\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R6\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

# R7
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p7[n], a7[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R7\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R7\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R7\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

# R8
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p8[n], a8[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R8\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R8\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R8\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R9
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p9[n], a9[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R9\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R9\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R9\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R10
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p10[n], a10[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R10\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R10\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R10\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R11
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p11[n], a11[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R11\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R11\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R11\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R12
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p12[n], a12[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R12\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R12\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R12\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R13
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p13[n], a13[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R13\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R13\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R13\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R14
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p14[n], a14[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R14\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R14\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R14\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R15
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p15[n], a15[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R15\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R15\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R15\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R16
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p16[n], a16[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R16\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R16\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R16\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R17
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p17[n], a17[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R17\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R17\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R17\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R18
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p18[n], a18[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R18\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R18\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R18\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R19
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p19[n], a19[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R19\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R19\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R19\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R20
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p20[n], a20[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R20\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R20\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R20\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R21
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p21[n], a21[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R21\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R21\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R21\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R22
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p22[n], a22[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R22\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R22\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R22\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R23
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p23[n], a23[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R23\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R23\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R23\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R24
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p24[n], a24[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R24\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R24\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R24\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R25
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p25[n], a25[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R25\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R25\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R25\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R26
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p26[n], a26[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R26\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R26\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R26\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R27
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p27[n], a27[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R27\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R27\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R27\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R28
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p28[n], a28[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R28\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R28\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R28\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R29
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p29[n], a29[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R29\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R29\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R29\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R30
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p30[n], a30[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R30\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R30\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R30\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R31
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p31[n], a31[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R31\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R31\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R31\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R32	
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 2)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 3)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 8)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 8x - Source 1  (OrigLoops 3/Channel 9)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p32[n], a32[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R32\\L1LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R32\\L2LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R32\\L3LPLC8.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	
	
	
	
	# Adding a new SliceFieldViewer
	# inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"]]
	# slice_field_viewer = analysis.viewers.SliceFieldViewer(inputs=inputs)
	# slice_field_viewer.Data.Mode = slice_field_viewer.Data.Mode.enum.QuantityAbsolute
	# slice_field_viewer.Data.Component = slice_field_viewer.Data.Component.enum.Component0
	# slice_field_viewer.Slice.Index = 80
	# slice_field_viewer.Visualization.Smooth = True
	# slice_field_viewer.UpdateAttributes()
	# document.AllAlgorithms.Add(slice_field_viewer)
	println('Success!')

except Exception as exc:
	import traceback
	traceback.print_exc(exc)
	# Reset active version to default
	ReleaseVersion.reset()
	raise(exc)
