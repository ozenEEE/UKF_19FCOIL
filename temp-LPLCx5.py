# -*- coding: utf-8 -*-
# This script was auto-generated by Sim4Life version 6.2.1.4910

import numpy
import s4l_v1.analysis as analysis
import s4l_v1.document as document
import s4l_v1.model as model
import s4l_v1.units as units
import builtins
println = builtins.print
from s4l_v1 import ReleaseVersion
from s4l_v1 import Unit

p1=[638,619,593,630,582]
p2=[649,544,586,571,640]
p3=[555,642,632,601,610]
p4=[650,652,635,624,606]
p5=[616,621,562,647,650]
p6=[552,631,599,655,574]
p7=[573,629,593,606,631]
p8=[606,587,618,557,630]
p9=[655,619,625,558,586]
p10=[656,561,631,571,608]
p11=[559,625,573,641,549]
p12=[656,544,622,571,546]
p13=[655,573,619,638,604]
p14=[598,546,560,569,634]
p15=[636,552,554,652,652]
p16=[557,639,600,582,556]
p17=[591,623,655,564,608]
p18=[650,578,581,570,596]
p19=[635,654,610,614,541]
p20=[655,544,567,597,580]
p21=[619,619,650,605,562]
p22=[544,560,574,660,569]
p23=[642,554,631,549,590]
p24=[652,600,630,593,546]
p25=[621,655,586,553,648]
p26=[631,581,608,655,653]
p27=[629,610,549,541,599]
p28=[587,567,546,633,599]
p29=[619,630,604,638,581]
p30=[561,571,634,644,648]
p31=[625,601,652,550,584]
p32=[544,624,556,588,553]

a1=[-5,66,149,220,289]
a2=[4,79,146,214,285]
a3=[-3,65,142,212,292]
a4=[0,76,144,215,284]
a5=[-5,77,143,210,291]
a6=[1,77,138,211,283]
a7=[-3,66,140,222,286]
a8=[2,71,139,223,290]
a9=[3,69,139,217,292]
a10=[4,76,140,210,282]
a11=[-1,71,143,212,294]
a12=[-6,78,138,214,292]
a13=[-4,67,150,221,288]
a14=[6,69,150,209,287]
a15=[-5,67,144,209,287]
a16=[5,67,144,211,285]
a17=[1,77,142,218,288]
a18=[7,73,150,219,288]
a19=[-6,73,142,218,293]
a20=[-1,67,138,215,292]
a21=[1,72,150,222,291]
a22=[-3,68,147,214,283]
a23=[4,77,144,219,290]
a24=[-4,68,145,212,288]
a25=[3,68,140,209,295]
a26=[-5,67,143,220,290]
a27=[-2,68,151,216,292]
a28=[2,71,145,216,287]
a29=[4,69,144,222,287]
a30=[-6,78,140,218,293]
a31=[6,71,144,218,282]
a32=[4,67,146,221,283]



try:
	# Define the version to use for default values
	ReleaseVersion.set_active(ReleaseVersion.version6_2)
	
	# Creating the analysis pipeline
	# Adding a new EmMultiPortSimulationExtractor
	simulation = document.AllSimulations["EM - BB - LPLC - 5x"]
	em_multi_port_simulation_extractor = simulation.Results()
	
	# Adding a new ModelToGridFilter
	inputs = []
	model_to_grid_filter1 = analysis.core.ModelToGridFilter(inputs=inputs)
	model_to_grid_filter1.Name = "Line1LPLC"
	model_to_grid_filter1.Entity = model.AllEntities()["Line1LPLC"]
	model_to_grid_filter1.MaximumEdgeLength = 0.001, units.Meters
	model_to_grid_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(model_to_grid_filter1)
	
	# Adding a new ModelToGridFilter
	inputs = []
	model_to_grid_filter2 = analysis.core.ModelToGridFilter(inputs=inputs)
	model_to_grid_filter2.Name = "Line2LPLC"
	model_to_grid_filter2.Entity = model.AllEntities()["Line2LPLC"]
	model_to_grid_filter2.MaximumEdgeLength = 0.001, units.Meters
	model_to_grid_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(model_to_grid_filter2)
	
	# Adding a new ModelToGridFilter
	inputs = []
	model_to_grid_filter3 = analysis.core.ModelToGridFilter(inputs=inputs)
	model_to_grid_filter3.Name = "Line3LPLC"
	model_to_grid_filter3.Entity = model.AllEntities()["Line3LPLC"]
	model_to_grid_filter3.MaximumEdgeLength = 0.001, units.Meters
	model_to_grid_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(model_to_grid_filter3)

	# Adding a new EmMultiPortSimulationCombiner
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	# em_multi_port_simulation_combiner = analysis.extractors.EmMultiPortSimulationCombiner(inputs=inputs)
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	
	p=[600,600,600,600,600]
	a=[0,72,144,216,288]
	
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p[n], a[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R0\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R0\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R0\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
#R1	
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p1[n], a1[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R1\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R1\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R1\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R2

	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p2[n], a2[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R2\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R2\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R2\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R3
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p3[n], a3[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R3\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R3\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R3\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R4
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p4[n], a4[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R4\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R4\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R4\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R5
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p5[n], a5[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R5\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R5\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R5\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

#R6
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p6[n], a6[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R6\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R6\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R6\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

# R7
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p7[n], a7[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R7\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R7\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R7\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

# R8
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p8[n], a8[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R8\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R8\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R8\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R9
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p9[n], a9[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R9\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R9\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R9\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R10
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p10[n], a10[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R10\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R10\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R10\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	println('R10 done!')
# R11
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p11[n], a11[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R11\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R11\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R11\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R12
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p12[n], a12[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R12\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R12\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R12\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R13
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p13[n], a13[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R13\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R13\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R13\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R14
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p14[n], a14[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R14\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R14\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R14\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R15
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p15[n], a15[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R15\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R15\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R15\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R16
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p16[n], a16[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R16\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R16\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R16\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R17
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p17[n], a17[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R17\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R17\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R17\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R18
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p18[n], a18[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R18\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R18\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R18\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R19
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p19[n], a19[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R19\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R19\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R19\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R20
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p20[n], a20[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R20\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R20\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R20\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	println('R20 done!')
# R21
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p21[n], a21[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R21\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R21\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R21\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R22
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p22[n], a22[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R22\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R22\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R22\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R23
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p23[n], a23[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R23\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R23\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R23\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R24
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p24[n], a24[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R24\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R24\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R24\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R25
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p25[n], a25[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R25\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R25\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R25\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R26
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p26[n], a26[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R26\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R26\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R26\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R27
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p27[n], a27[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R27\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R27\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R27\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R28
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p28[n], a28[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R28\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R28\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R28\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R29
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p29[n], a29[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R29\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R29\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R29\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R30
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p30[n], a30[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R30\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R30\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R30\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	println('R30 done!')
# R31
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p31[n], a31[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R31\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R31\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R31\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
# R32	
	em_multi_port_simulation_extractor = simulation.Results()
	inputs = [em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 4)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 5)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 6)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 7)"], em_multi_port_simulation_extractor.Outputs["EM - BB - LPLC - 5x - Source 1  (OrigLoops 3/Channel 8)"]]
	em_multi_port_simulation_combiner = em_multi_port_simulation_extractor.GetSimulationCombiner()
	weights = em_multi_port_simulation_combiner.GetChannelWeights()
	for n, channel in enumerate(weights):
		power, phase = weights[channel]
		weights[channel] = p32[n], a32[n]

	for channel in weights:
		print(channel, weights[channel])
		em_multi_port_simulation_combiner.SetChannelWeight(channel, *weights[channel])
	
	
	em_multi_port_simulation_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_simulation_combiner)
	
	
	# Adding a new EmMultiPortSensorCombiner
	inputs = [em_multi_port_simulation_combiner.Outputs["Overall Field"]]
	em_multi_port_sensor_combiner = analysis.extractors.EmMultiPortSensorCombiner(inputs=inputs)
	em_multi_port_sensor_combiner.Name = "Overall Field (combined)"
	em_multi_port_sensor_combiner.UpdateAttributes()
	document.AllAlgorithms.Add(em_multi_port_sensor_combiner)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter1.Outputs["Line"]]
	field_interpolation_filter1 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter1.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter1)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter2.Outputs["Line"]]
	field_interpolation_filter2 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter2.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter2)
	
	# Adding a new FieldInterpolationFilter
	inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"], model_to_grid_filter3.Outputs["Line"]]
	field_interpolation_filter3 = analysis.core.FieldInterpolationFilter(inputs=inputs)
	field_interpolation_filter3.UpdateAttributes()
	document.AllAlgorithms.Add(field_interpolation_filter3)

	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter1.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R32\\L1LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)

	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter2.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R32\\L2LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	# Adding a new MatlabExporter
	inputs = [field_interpolation_filter3.Outputs["B1(x,y,z,f0)"]]
	matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
	matlab_exporter.FileName = u"C:\\Users\\oezen\\Documents\\Sim4Life\\6.2\\R32\\L3LPLC5.mat"
	matlab_exporter.UpdateAttributes()
	document.AllAlgorithms.Add(matlab_exporter)
	
	
	
	
	
	# Adding a new SliceFieldViewer
	# inputs = [em_multi_port_sensor_combiner.Outputs["B1(x,y,z,f0)"]]
	# slice_field_viewer = analysis.viewers.SliceFieldViewer(inputs=inputs)
	# slice_field_viewer.Data.Mode = slice_field_viewer.Data.Mode.enum.QuantityAbsolute
	# slice_field_viewer.Data.Component = slice_field_viewer.Data.Component.enum.Component0
	# slice_field_viewer.Slice.Index = 80
	# slice_field_viewer.Visualization.Smooth = True
	# slice_field_viewer.UpdateAttributes()
	# document.AllAlgorithms.Add(slice_field_viewer)

except Exception as exc:
	import traceback
	traceback.print_exc(exc)
	# Reset active version to default
	ReleaseVersion.reset()
	raise(exc)
